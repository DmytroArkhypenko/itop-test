{"version":3,"sources":["components/ActionBar/styles.js","components/ActionBar/ActionBar.jsx","components/Timer/styles.js","components/Timer/Timer.jsx","styles.js","App.jsx","index.jsx"],"names":["ButtonsContainer","styled","div","Button","button","ActionBar","prevClick","timeout","isActive","timer","startTimer","stopTimer","resetTimer","onClick","event","currentTime","Date","getTime","tapLength","clearTimeout","preventDefault","setTimeout","onDoubleClickCheck","Container","Timer","useState","seconds","setSeconds","minutes","setMinutes","hours","setHours","useEffect","Math","floor","observableInterval","interval","App","setTimer","subscription","setSubscription","setIsActive","className","subscribe","unsubscribe","ReactDOM","render","document","getElementById"],"mappings":"ytBAEO,IAAMA,EAAmBC,IAAOC,IAAV,KAOhBC,EAASF,IAAOG,OAAV,KCJNC,EAAY,SAAC,GAMnB,IACDC,EACAC,EAPJC,EAKI,EALJA,SACAC,EAII,EAJJA,MACAC,EAGI,EAHJA,WACAC,EAEI,EAFJA,UACAC,EACI,EADJA,WAmBA,OACE,mCACGJ,EACC,eAACR,EAAD,WACE,cAACG,EAAD,CAAQU,QAASF,EAAjB,kBACA,cAACR,EAAD,CAAQU,QAAS,SAACC,GAAD,OApBE,SAACA,GAC1B,IAAMC,GAAc,IAAIC,MAAOC,UACzBC,EAAYH,EAAcT,EAChCa,aAAaZ,GACTW,EAAY,KAAOA,EAAY,GACjCP,IACAG,EAAMM,kBAENb,EAAUc,YAAW,WACnBF,aAAaZ,KACZ,KAELD,EAAYS,EAQsBO,CAAmBR,IAA/C,kBACA,cAACX,EAAD,CAAQU,QAASD,EAAjB,sBAEU,IAAVH,EACF,cAACT,EAAD,UACE,cAACG,EAAD,CAAQU,QAASH,EAAjB,qBAGF,eAACV,EAAD,WACE,cAACG,EAAD,CAAQU,QAASH,EAAjB,oBACA,cAACP,EAAD,CAAQU,QAASD,EAAjB,yB,qNC1CH,IAAMW,EAAYtB,IAAOC,IAAV,KCETsB,EAAQ,SAAC,GAAe,IAAbf,EAAY,EAAZA,MAAY,EACJgB,mBAAS,GADL,mBAC3BC,EAD2B,KAClBC,EADkB,OAEJF,mBAAS,GAFL,mBAE3BG,EAF2B,KAElBC,EAFkB,OAGRJ,mBAAS,GAHD,mBAG3BK,EAH2B,KAGpBC,EAHoB,KAWlC,OANAC,qBAAU,WACRD,EAASE,KAAKC,MAAMzB,EAAQ,OAC5BoB,EAAWI,KAAKC,MAAMzB,EAAQ,IAAc,GAARqB,GACpCH,EAAWlB,EAAgB,KAARqB,EAAyB,GAAVF,KACjC,CAACE,EAAOF,EAASnB,IAGlB,cAACc,EAAD,UACE,8BACGO,GAAS,GAAKA,EAAd,WAA0BA,GAD7B,IAEGF,GAAW,GAAKA,EAAhB,WAA8BA,GAFjC,IAGGF,GAAW,GAAKA,EAAhB,WAA8BA,S,sMClBhC,IAAMH,EAAYtB,IAAOC,IAAV,KCMhBiC,G,MAAqBC,YAAS,MAEvBC,EAAM,WAAO,IAAD,EACGZ,mBAAS,GADZ,mBAChBhB,EADgB,KACT6B,EADS,OAEiBb,qBAFjB,mBAEhBc,EAFgB,KAEFC,EAFE,OAGSf,oBAAS,GAHlB,mBAGhBjB,EAHgB,KAGNiC,EAHM,KA2BvB,OACE,cAAC,EAAD,UACE,sBAAKC,UAAU,YAAf,UACE,cAAC,EAAD,CAAOjC,MAAOA,IACd,cAAC,EAAD,CACED,SAAUA,EACVC,MAAOA,EACPC,WA7BW,WACjB+B,GAAY,GACZ,IAAIf,EAAUjB,EACd+B,EACEL,EAAmBQ,WAAU,WAE3BL,EADAZ,GAAW,QAyBTf,UAnBU,WAChB4B,EAAaK,cACbH,GAAY,IAkBN7B,WAfW,WACjB2B,EAAaK,cACbH,GAAY,GACZH,EAAS,YC9BbO,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.7266642e.chunk.js","sourcesContent":["import styled from \"styled-components\"\n\nexport const ButtonsContainer = styled.div`\n  width: 500px;\n  margin: auto;\n  display: flex;\n  justify-content: center;\n`\n\nexport const Button = styled.button`\n  background: black;\n  color: white;\n  border-radius: 5px;\n  margin-top: 30px;\n  margin-left: 5px;\n  padding: 12px 20px;\n  font-size: 16px;\n  width: 150px;\n  transition: background 0.3s;\n  cursor: pointer;\n  &:hover {\n    border: 2px solid black;\n    background: white;\n    color: black;\n  }\n`\n","/* eslint-disable no-nested-ternary */\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Button, ButtonsContainer } from \"./styles\"\n\nexport const ActionBar = ({\n  isActive,\n  timer,\n  startTimer,\n  stopTimer,\n  resetTimer,\n}) => {\n  let prevClick\n  let timeout\n  const onDoubleClickCheck = (event) => {\n    const currentTime = new Date().getTime()\n    const tapLength = currentTime - prevClick\n    clearTimeout(timeout)\n    if (tapLength < 300 && tapLength > 0) {\n      stopTimer()\n      event.preventDefault()\n    } else {\n      timeout = setTimeout(() => {\n        clearTimeout(timeout)\n      }, 300)\n    }\n    prevClick = currentTime\n  }\n\n  return (\n    <>\n      {isActive ? (\n        <ButtonsContainer>\n          <Button onClick={stopTimer}>Stop</Button>\n          <Button onClick={(event) => onDoubleClickCheck(event)}>Wait</Button>\n          <Button onClick={resetTimer}>Reset</Button>\n        </ButtonsContainer>\n      ) : timer === 0 ? (\n        <ButtonsContainer>\n          <Button onClick={startTimer}>Start</Button>\n        </ButtonsContainer>\n      ) : (\n        <ButtonsContainer>\n          <Button onClick={startTimer}>Resume</Button>\n          <Button onClick={resetTimer}>Reset</Button>\n        </ButtonsContainer>\n      )}\n    </>\n  )\n}\n\nActionBar.propTypes = {\n  isActive: PropTypes.bool.isRequired,\n  startTimer: PropTypes.func.isRequired,\n  stopTimer: PropTypes.func.isRequired,\n  resetTimer: PropTypes.func.isRequired,\n  timer: PropTypes.number.isRequired,\n}\n","import styled from \"styled-components\"\n\nexport const Container = styled.div`\n  background: black;\n  color: #fff;\n  display: inline-block;\n  font-size: 22px;\n  padding: 20px;\n  border-radius: 5px;\n  width: 300px;\n`\n","import React, { useEffect, useState } from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Container } from \"./styles\"\n\nexport const Timer = ({ timer }) => {\n  const [seconds, setSeconds] = useState(0)\n  const [minutes, setMinutes] = useState(0)\n  const [hours, setHours] = useState(0)\n\n  useEffect(() => {\n    setHours(Math.floor(timer / 3600))\n    setMinutes(Math.floor(timer / 60) - hours * 60)\n    setSeconds(timer - hours * 3600 - minutes * 60)\n  }, [hours, minutes, timer])\n\n  return (\n    <Container>\n      <p>\n        {hours >= 10 ? hours : `0${hours}`}:\n        {minutes >= 10 ? minutes : `0${minutes}`}:\n        {seconds >= 10 ? seconds : `0${seconds}`}\n      </p>\n    </Container>\n  )\n}\n\nTimer.propTypes = {\n  timer: PropTypes.number.isRequired,\n}\n","import styled from \"styled-components\"\n\nexport const Container = styled.div`\n  width: 100%;\n  background: #fff;\n  margin: 30px auto;\n  position: relative;\n  padding: 60px 0px;\n  text-align: center;\n`\n","import React, { useState } from \"react\"\nimport { interval } from \"rxjs\"\nimport { ActionBar } from \"./components/ActionBar/ActionBar\"\nimport { Timer } from \"./components/Timer/Timer\"\nimport { Container } from \"./styles\"\n\nimport \"./global.scss\"\n\nconst observableInterval = interval(1000)\n\nexport const App = () => {\n  const [timer, setTimer] = useState(0)\n  const [subscription, setSubscription] = useState()\n  const [isActive, setIsActive] = useState(false)\n\n  const startTimer = () => {\n    setIsActive(true)\n    let seconds = timer\n    setSubscription(\n      observableInterval.subscribe(() => {\n        seconds += 1\n        setTimer(seconds)\n      })\n    )\n  }\n\n  const stopTimer = () => {\n    subscription.unsubscribe()\n    setIsActive(false)\n  }\n\n  const resetTimer = () => {\n    subscription.unsubscribe()\n    setIsActive(false)\n    setTimer(0)\n  }\n\n  return (\n    <Container>\n      <div className=\"stopwatch\">\n        <Timer timer={timer} />\n        <ActionBar\n          isActive={isActive}\n          timer={timer}\n          startTimer={startTimer}\n          stopTimer={stopTimer}\n          resetTimer={resetTimer}\n        />\n      </div>\n    </Container>\n  )\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { App } from \"./App\"\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n"],"sourceRoot":""}